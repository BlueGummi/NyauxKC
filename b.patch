diff --git a/kernel/src/sched/sched.c b/kernel/src/sched/sched.c
index 790998d..ea4af1d 100644
--- a/kernel/src/sched/sched.c
+++ b/kernel/src/sched/sched.c
@@ -210,7 +210,34 @@ int scheduler_fork() {
   fun->kernel_stack_ptr = kstack;
   fun->proc = newprocess;
 #if defined __x86_64__
-  fun->arch_data.frame = calledby->arch_data.frame;
+  struct SyscallFrame {
+	  uint64_t r15, r14, r13, r12, r11, r10, r9, r8;
+	  uint64_t rdi, rsi, rbp, rcx;
+  };
+  struct SyscallFrame *syscallframe = (struct SyscallFrame *)(arch_get_per_cpu_data()->arch_data.kernel_stack_ptr - 12 * 8);
+
+  fun->arch_data.frame = (struct StackFrame){};
+  struct StackFrame* destframe = &fun->arch_data.frame;
+  destframe->r15 = syscallframe->r15;
+  destframe->r14 = syscallframe->r14;
+  destframe->r13 = syscallframe->r13;
+  destframe->r12 = syscallframe->r12;
+  destframe->r11 = syscallframe->r11;
+  destframe->r10 = syscallframe->r10;
+  destframe->r9 = syscallframe->r9;
+  destframe->r8 = syscallframe->r8;
+  destframe->rdi = syscallframe->rdi;
+  destframe->rsi = syscallframe->rsi;
+  destframe->rbp = syscallframe->rbp;
+  destframe->rcx = syscallframe->rcx;
+  destframe->rip = syscallframe->rcx;
+  // USER CODE
+  destframe->cs = 0x40 | 3;
+  // USER DATA
+  destframe->ss = 0x38 | 3;
+  destframe->rflags = syscallframe->r11;
+  destframe->rsp = arch_get_per_cpu_data()->arch_data.syscall_stack_ptr_tmp;
+
   fun->arch_data.frame.rax = 0;
   fun->arch_data.fs_base = calledby->arch_data.fs_base;
 
