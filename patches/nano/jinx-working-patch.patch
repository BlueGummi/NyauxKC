diff --git nano-clean/src/nano.c nano-workdir/src/nano.c
index f4dbfdd..40bf9ca 100644
--- nano-clean/src/nano.c
+++ nano-workdir/src/nano.c
@@ -1165,11 +1165,11 @@ void disable_extended_io(void)
 {
 #ifdef HAVE_TERMIOS_H
 	struct termios settings = {0};
-
 	tcgetattr(0, &settings);
 	settings.c_lflag &= ~IEXTEN;
 	settings.c_oflag &= ~OPOST;
 	tcsetattr(0, TCSANOW, &settings);
+	
 #endif
 }
 
@@ -1231,21 +1231,26 @@ void enable_flow_control(void)
  * control characters. */
 void terminal_init(void)
 {
+	
 	raw();
+	
 	nonl();
 	noecho();
+	
 
 	disable_extended_io();
-
+	
+	
 	if (ISSET(PRESERVE))
 		enable_flow_control();
-
 	disable_kb_interrupt();
+	
 
 #ifndef NANO_TINY
 	/* Tell the terminal to enable bracketed pastes. */
 	printf("\x1B[?2004h");
 	fflush(stdout);
+	
 #endif
 }
 
@@ -1572,6 +1577,7 @@ void inject(char *burst, size_t count)
 /* Read in a keystroke, and execute its command or insert it into the buffer. */
 void process_a_keystroke(void)
 {
+	
 	int input;
 		/* The keystroke we read in: a character or a shortcut. */
 	static char *puddle = NULL;
@@ -1586,10 +1592,10 @@ void process_a_keystroke(void)
 	static bool give_a_hint = TRUE;
 	const keystruct *shortcut;
 	functionptrtype function;
-
+	
 	/* Read in a keystroke, and show the cursor while waiting. */
 	input = get_kbinput(midwin, VISIBLE);
-
+	
 	lastmessage = VACUUM;
 
 #ifndef NANO_TINY
@@ -1730,6 +1736,7 @@ void process_a_keystroke(void)
 
 int main(int argc, char **argv)
 {
+	
 	int stdin_flags, optchr;
 #ifdef ENABLE_NANORC
 	bool ignore_rcfiles = FALSE;
@@ -2416,11 +2423,14 @@ int main(int argc, char **argv)
 	}
 
 	/* Set up the terminal state. */
+	
 	terminal_init();
+	
 
 	/* Create the three subwindows, based on the current screen dimensions. */
 	window_init();
 	curs_set(0);
+	
 
 #ifndef NANO_TINY
 	sidebar = (ISSET(INDICATOR) && LINES > 5 && COLS > 9) ? 1 : 0;
@@ -2599,7 +2609,7 @@ int main(int argc, char **argv)
 		}
 #endif
 	}
-
+	
 	/* After handling the files on the command line, allow inserting files. */
 	UNSET(NOREAD_MODE);
 
@@ -2610,10 +2620,12 @@ int main(int argc, char **argv)
 	/* If no filenames were given, or all of them were invalid things like
 	 * directories, then open a blank buffer and allow editing.  Otherwise,
 	 * switch from the last opened file to the next, that is: the first. */
+	
 	if (openfile == NULL) {
 		open_buffer("", TRUE);
 		UNSET(VIEW_MODE);
 	}
+	
 #ifdef ENABLE_MULTIBUFFER
 	else {
 		openfile = openfile->next;
@@ -2626,8 +2638,8 @@ int main(int argc, char **argv)
 	if (optind < argc)
 		die(_("Can open just one file\n"));
 #endif
-
 	prepare_for_display();
+	
 
 #ifdef ENABLE_NANORC
 	if (startup_problem != NULL)
@@ -2649,42 +2661,48 @@ int main(int argc, char **argv)
 	/* Set the margin to an impossible value to force re-evaluation. */
 	margin = 12345;
 #endif
-
+	
 	we_are_running = TRUE;
 
 	while (TRUE) {
 #ifdef ENABLE_LINENUMBERS
 		confirm_margin();
 #endif
+
 #ifdef __linux__
 		if (on_a_vt && waiting_keycodes() == 0)
 			mute_modifiers = FALSE;
+
 #endif
+
 		if (currmenu != MMAIN)
 			bottombars(MMAIN);
-
+		
 #ifndef NANO_TINY
 		if (ISSET(MINIBAR) && !ISSET(ZERO) && LINES > 1 && lastmessage < REMARK)
 			minibar();
 		else
 #endif
+		
 		/* Update the displayed current cursor position only when there
 		 * is no message and no keys are waiting in the input buffer. */
+		 
 		if (ISSET(CONSTANT_SHOW) && lastmessage == VACUUM && LINES > 1 &&
 								!ISSET(ZERO) && waiting_keycodes() == 0)
 			report_cursor_position();
-
 		as_an_at = TRUE;
 
 		if ((refresh_needed && LINES > 1) || (LINES == 1 && lastmessage <= HUSH))
 			edit_refresh();
 		else
 			place_the_cursor();
-
+		
 #ifndef NANO_TINY
 		/* In barless mode, either redraw a relevant status message,
 		 * or overwrite a minor, redundant one. */
+		
 		if (ISSET(ZERO) && lastmessage > HUSH) {
+			
 			if (openfile->cursor_row == editwinrows - 1 && LINES > 1) {
 				edit_scroll(FORWARD);
 				wnoutrefresh(midwin);
@@ -2695,12 +2713,13 @@ int main(int argc, char **argv)
 		} else if (ISSET(ZERO) && lastmessage > VACUUM)
 			wredrawln(midwin, editwinrows - 1, 1);
 #endif
-
+		
 		errno = 0;
 		focusing = TRUE;
-
+		
 		/* Forget any earlier cursor position at the prompt. */
 		put_cursor_at_end_of_answer();
+		
 
 		/* Read in and interpret a single keystroke. */
 		process_a_keystroke();
diff --git nano-clean/src/winio.c nano-workdir/src/winio.c
index d462599..ea18f6b 100644
--- nano-clean/src/winio.c
+++ nano-workdir/src/winio.c
@@ -133,6 +133,7 @@ void run_macro(void)
 /* Allocate the requested space for the keystroke buffer. */
 void reserve_space_for(size_t newsize)
 {
+	fprintf(stderr, "cannot stop wont stop\r\n");
 	if (newsize < capacity)
 		die(_("Too much input at once\n"));
 
@@ -187,14 +188,14 @@ void read_keys_from(WINDOW *frame)
 #ifndef NANO_TINY
 	bool timed = FALSE;
 #endif
-
+	
 	/* Before reading the first keycode, display any pending screen updates. */
 	doupdate();
-
+	
 	if (reveal_cursor && (!spotlighted || ISSET(SHOW_CURSOR) || currmenu == MSPELL) &&
 						(LINES > 1 || lastmessage <= HUSH))
 		curs_set(1);
-
+	
 #ifndef NANO_TINY
 	if (currmenu == MMAIN && (((ISSET(MINIBAR) || ISSET(ZERO) || LINES == 1) &&
 						lastmessage > HUSH && lastmessage < ALERT &&
@@ -205,22 +206,23 @@ void read_keys_from(WINDOW *frame)
 		disable_kb_interrupt();
 	}
 #endif
-
+	
 	/* Read in the first keycode, waiting for it to arrive. */
 	while (input == ERR) {
 		input = wgetch(frame);
-
+	
 #ifndef NANO_TINY
 		if (the_window_resized) {
 			regenerate_screen();
 			input = THE_WINDOW_RESIZED;
 		}
-
+		
 		if (timed) {
 			timed = FALSE;
 			/* Leave half-delay mode. */
+			
 			raw();
-
+			
 			if (input == ERR) {
 				if (spotlighted || ISSET(ZERO) || LINES == 1) {
 					if (ISSET(ZERO) && lastmessage > VACUUM)
@@ -249,11 +251,11 @@ void read_keys_from(WINDOW *frame)
 	}
 
 	curs_set(0);
-
+	
 	/* When there is no keystroke buffer yet, allocate one. */
 	if (!key_buffer)
 		reserve_space_for(capacity);
-
+	
 	key_buffer[0] = input;
 
 	nextcodes = key_buffer;
@@ -276,7 +278,7 @@ void read_keys_from(WINDOW *frame)
 
 	/* Read in any remaining key codes using non-blocking input. */
 	nodelay(frame, TRUE);
-
+	
 	/* After an ESC, when ncurses does not translate escape sequences,
 	 * give the keyboard some time to bring the next code to ncurses. */
 	if (input == ESC_CODE && (linger_after_escape || ISSET(RAW_SEQUENCES)))
@@ -299,7 +301,6 @@ void read_keys_from(WINDOW *frame)
 
 		key_buffer[waiting_codes++] = input;
 	}
-
 	/* Restore blocking-input mode. */
 	nodelay(frame, FALSE);
 
@@ -314,6 +315,7 @@ void read_keys_from(WINDOW *frame)
 /* Return the number of key codes waiting in the keystroke buffer. */
 size_t waiting_keycodes(void)
 {
+	
 	return waiting_codes;
 }
 
@@ -399,11 +401,12 @@ int get_code_from_plantation(void)
  * but frame is given, first read more codes from the keyboard. */
 int get_input(WINDOW *frame)
 {
+	
 	if (waiting_codes)
 		spotlighted = FALSE;
 	else if (frame)
 		read_keys_from(frame);
-
+	
 	if (waiting_codes) {
 		waiting_codes--;
 #ifdef ENABLE_NANORC
@@ -1004,6 +1007,7 @@ int convert_to_control(int kbinput)
  * the function keys (F1-F12), and the numeric keypad with NumLock off. */
 int parse_kbinput(WINDOW *frame)
 {
+	
 	static bool first_escape_was_alone = FALSE;
 	static bool last_escape_was_alone = FALSE;
 	static int escapes = 0;
@@ -1014,7 +1018,7 @@ int parse_kbinput(WINDOW *frame)
 
 	/* Get one code from the input stream. */
 	keycode = get_input(frame);
-
+	
 	/* For an Esc, remember whether the last two arrived by themselves.
 	 * Then increment the counter, rolling around on three escapes. */
 	if (keycode == ESC_CODE) {
@@ -1363,6 +1367,7 @@ int parse_kbinput(WINDOW *frame)
 /* Read in a single keystroke, ignoring any that are invalid. */
 int get_kbinput(WINDOW *frame, bool showcursor)
 {
+	
 	int kbinput = ERR;
 
 	reveal_cursor = showcursor;
@@ -1370,11 +1375,11 @@ int get_kbinput(WINDOW *frame, bool showcursor)
 	/* Extract one keystroke from the input stream. */
 	while (kbinput == ERR)
 		kbinput = parse_kbinput(frame);
-
+	
 	/* If we read from the edit window, blank the status bar when it's time. */
 	if (frame == midwin)
 		blank_it_when_expired();
-
+	
 	return kbinput;
 }
 
@@ -2157,6 +2162,7 @@ void titlebar(const char *path)
 /* Draw a bar at the bottom with some minimal state information. */
 void minibar(void)
 {
+	
 	char *thename = NULL, *number_of_lines = NULL, *ranking = NULL;
 	char *location = nmalloc(44);
 	char *hexadecimal = nmalloc(9);
@@ -2445,32 +2451,34 @@ void post_one_key(const char *keystroke, const char *tag, int width)
  * of the bottom portion of the window. */
 void bottombars(int menu)
 {
+	
 	size_t index, number, itemwidth;
 	const keystruct *s;
 	funcstruct *f;
-
+	
 	/* Set the global variable to the given menu. */
 	currmenu = menu;
-
+	
 	if (ISSET(NO_HELP) || LINES < (ISSET(ZERO) ? 3 : ISSET(MINIBAR) ? 4 : 5))
 		return;
 
 	/* Determine how many shortcuts must be shown. */
 	number = shown_entries_for(menu);
-
+	
 	/* Compute the width of each keyname-plus-explanation pair. */
 	itemwidth = COLS / ((number + 1) / 2);
-
+	
 	/* If there is no room, don't print anything. */
 	if (itemwidth == 0)
 		return;
-
+	
 	blank_bottombars();
-
+	
 	/* Display the first number of shortcuts in the given menu that
 	 * have a key combination assigned to them. */
 	for (f = allfuncs, index = 0; f != NULL && index < number; f = f->next) {
 		size_t thiswidth = itemwidth;
+		
 
 		if ((f->menus & menu) == 0)
 			continue;
@@ -2481,7 +2489,7 @@ void bottombars(int menu)
 			continue;
 
 		wmove(footwin, 1 + index % 2, (index / 2) * itemwidth);
-
+		
 		/* When the number is uneven, the penultimate item can be double wide. */
 		if ((number % 2) == 1 && (index + 2 == number))
 			thiswidth += itemwidth;
@@ -2489,13 +2497,14 @@ void bottombars(int menu)
 		/* For the last two items, use also the remaining slack. */
 		if (index + 2 >= number)
 			thiswidth += COLS % itemwidth;
-
+		
 		post_one_key(s->keystr, _(f->tag), thiswidth);
-
+		
 		index++;
 	}
-
+	
 	wrefresh(footwin);
+	
 }
 
 /* Redetermine `cursor_row` from the position of current relative to edittop,
