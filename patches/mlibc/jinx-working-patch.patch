diff --git mlibc-clean/options/rtld/generic/linker.cpp mlibc-workdir/options/rtld/generic/linker.cpp
index 33cd1b9..0c5277c 100644
--- mlibc-clean/options/rtld/generic/linker.cpp
+++ mlibc-workdir/options/rtld/generic/linker.cpp
@@ -25,9 +25,9 @@ enum {
 uintptr_t libraryBase = 0x41000000;
 #endif
 
-constexpr bool verbose = false;
+constexpr bool verbose = true;
 constexpr bool stillSlightlyVerbose = false;
-constexpr bool logBaseAddresses = false;
+constexpr bool logBaseAddresses = true;
 constexpr bool logRpath = false;
 constexpr bool logLdPath = false;
 constexpr bool logSymbolVersions = false;
diff --git mlibc-clean/options/rtld/generic/main.cpp mlibc-workdir/options/rtld/generic/main.cpp
index e96df46..40d48e6 100644
--- mlibc-clean/options/rtld/generic/main.cpp
+++ mlibc-workdir/options/rtld/generic/main.cpp
@@ -24,9 +24,9 @@
 #define HIDDEN  __attribute__((__visibility__("hidden")))
 #define EXPORT  __attribute__((__visibility__("default")))
 
-static constexpr bool logEntryExit = false;
-static constexpr bool logStartup = false;
-static constexpr bool logDlCalls = false;
+static constexpr bool logEntryExit = true;
+static constexpr bool logStartup = true;
+static constexpr bool logDlCalls = true;
 
 #ifndef MLIBC_STATIC_BUILD
 extern HIDDEN void *_GLOBAL_OFFSET_TABLE_[];
diff --git mlibc-clean/sysdeps/nyaux/generic/generic.cpp mlibc-workdir/sysdeps/nyaux/generic/generic.cpp
index e2c2278..d795d1a 100755
--- mlibc-clean/sysdeps/nyaux/generic/generic.cpp
+++ mlibc-workdir/sysdeps/nyaux/generic/generic.cpp
@@ -59,7 +59,7 @@ int sys_close(int fd) {
 int sys_futex_wait(int *pointer, int expected,
                    const struct timespec *time) STUB_ONLY;
 int sys_futex_wake(int *pointer) {
-  sys_libc_log("sys futex wake is a stub");
+  // sys_libc_log("sys futex wake is a stub");
   return 0;
 };
 int sys_openat(int dirfd, const char *path, int flags, mode_t mode, int *fd) {
@@ -224,6 +224,14 @@ int sys_ioctl(int fd, unsigned long request, void *arg, int *result) {
   *result = (int)ret.ret;
   return 0;
 }
+int sys_poll(struct pollfd *fds, nfds_t count, int timeout, int *num_events) {
+  __syscall_ret ret = __syscall3(SYSCALL_POLL, (uint64_t)fds, count, timeout);
+  if (ret.err != 0)
+		return ret.err;
+
+	*num_events = (int)ret.ret;
+	return 0;
+}
 int sys_fcntl(int fd, int request, va_list args, int *result) {
   // __syscall_ret ret = __syscall(12, fd, request, va_arg(args, uint64_t));
 
@@ -236,35 +244,89 @@ int sys_fcntl(int fd, int request, va_list args, int *result) {
                       << frg::endlog;
   return ENOSYS;
 }
+int sys_ppoll(struct pollfd *fds, int nfds, const struct timespec *timeout,
+  const sigset_t *sigmask, int *num_events) {
+    sigset_t origmask;
+    int timeoutr;
+    int ret;
+
+    timeoutr = (timeout == NULL) ? -1 :
+              (timeout->tv_sec * 1000 + timeout->tv_nsec / 1000000);
+    pthread_sigmask(SIG_SETMASK, sigmask, &origmask);
+    ret = sys_poll(fds, nfds, timeoutr, num_events);
+    pthread_sigmask(SIG_SETMASK, &origmask, NULL);
+    return ret;
+}
 int sys_pselect(int nfds, fd_set *read_set, fd_set *write_set,
                 fd_set *except_set, const struct timespec *timeout,
                 const sigset_t *sigmask, int *num_events) {
   // this is a stub to please bash
-  fd_set res_read_set;
-  fd_set res_write_set;
-  fd_set res_except_set;
-  FD_ZERO(&res_read_set);
-  FD_ZERO(&res_write_set);
-  FD_ZERO(&res_except_set);
-  for (int i = 0; i < nfds; i++) {
-    if (read_set && FD_ISSET(i, read_set)) {
-      FD_SET(i, &res_read_set);
-    }
-    if (write_set && FD_ISSET(i, write_set)) {
-      FD_SET(i, &res_write_set);
-    }
-    if (except_set && FD_ISSET(i, except_set)) {
-      FD_SET(i, &res_except_set);
-    }
-  }
-  if (read_set)
-    *read_set = res_read_set;
-  if (write_set)
-    *write_set = res_write_set;
-  if (except_set)
-    *except_set = res_except_set;
-  *num_events = 1;
-  return 0;
+  struct pollfd *fds = (struct pollfd *)calloc(nfds, sizeof(struct pollfd));
+	if (fds == NULL) {
+		return ENOMEM;
+	}
+
+	for (int i = 0; i < nfds; i++) {
+		struct pollfd *fd = &fds[i];
+
+		if (read_set && FD_ISSET(i, read_set))
+			fd->events |= POLLIN; // TODO: Additional events.
+		if (write_set && FD_ISSET(i, write_set))
+			fd->events |= POLLOUT; // TODO: Additional events.
+		if (except_set && FD_ISSET(i, except_set))
+			fd->events |= POLLPRI;
+
+		if (!fd->events) {
+			fd->fd = -1;
+			continue;
+		}
+
+		fd->fd = i;
+	}
+
+	int e = sys_ppoll(fds, nfds, timeout, sigmask, num_events);
+
+	if (e != 0) {
+		free(fds);
+		return e;
+	}
+
+	fd_set res_read_set;
+	fd_set res_write_set;
+	fd_set res_except_set;
+	FD_ZERO(&res_read_set);
+	FD_ZERO(&res_write_set);
+	FD_ZERO(&res_except_set);
+
+	for (int i = 0; i < nfds; i++) {
+		struct pollfd *fd = &fds[i];
+
+		if (read_set && FD_ISSET(i, read_set)
+				&& fd->revents & (POLLIN | POLLERR | POLLHUP)) {
+			FD_SET(i, &res_read_set);
+		}
+
+		if (write_set && FD_ISSET(i, write_set)
+				&& fd->revents & (POLLOUT | POLLERR | POLLHUP)) {
+			FD_SET(i, &res_write_set);
+		}
+
+		if (except_set && FD_ISSET(i, except_set)
+				&& fd->revents & POLLPRI) {
+			FD_SET(i, &res_except_set);
+		}
+	}
+
+	free(fds);
+
+	if (read_set)
+		*read_set = res_read_set;
+	if (write_set)
+		*write_set = res_write_set;
+	if (except_set)
+		*except_set = res_except_set;
+
+	return 0;
 }
 int sys_tcsetattr(int fd, int optional_action, const struct termios *attr) {
   int ret;
@@ -274,10 +336,10 @@ int sys_tcsetattr(int fd, int optional_action, const struct termios *attr) {
     optional_action = TCSETS;
     break;
   case TCSADRAIN:
-    return ENOSYS;
+    optional_action = TCSETS;
     break;
   case TCSAFLUSH:
-    return ENOSYS;
+    optional_action = TCSETS;
     break;
   default:
     __ensure(!"Unsupported tcsetattr");
@@ -317,6 +379,7 @@ int sys_execve(const char *path, char *const argv[], char *const envp[]) {
   if (ret.ret != 0) {
     return ret.err;
   } else {
+    mlibc::infoLogger() << "HOW??" << frg::endlog;
     __builtin_unreachable();
   }
 }
@@ -362,6 +425,14 @@ int sys_dup(int fd, int flags, int *newfd) {
   *newfd = (ssize_t)ret.ret;
   return 0;
 }
+int sys_dup2(int fd, int flags, int newfd) {
+  __syscall_ret ret = __syscall3(SYSCALL_DUP2, fd, newfd, flags);
+
+  if (ret.err != 0)
+    return ret.err;
+
+  return 0;
+}
 int sys_stat(fsfd_target fsfdt, int fd, const char *path, int flags,
              struct stat *statbuf) {
   __syscall_ret ret;
diff --git mlibc-clean/sysdeps/nyaux/include/nyaux/syscalls.h mlibc-workdir/sysdeps/nyaux/include/nyaux/syscalls.h
index d613c67..eb6516e 100644
--- mlibc-clean/sysdeps/nyaux/include/nyaux/syscalls.h
+++ mlibc-workdir/sysdeps/nyaux/include/nyaux/syscalls.h
@@ -21,4 +21,6 @@
 #define SYSCALL_FREE 17
 #define SYSCALL_EXECVE 18
 #define SYSCALL_FACCESSAT 19
+#define SYSCALL_DUP2 20
+#define SYSCALL_POLL 21
 #endif
\ No newline at end of file
